from scrapy.spider import Spider
from scrapy.selector import Selector
from scrapy.contrib.loader import XPathItemLoader
from scrapy.contrib.loader.processor import Join, MapCompose
from scrapy.http import FormRequest, Request
from scraper.items import faculty_contact


class faculty_spider(Spider):
    name = "faculty"
    allowed_domains = ["dir.aucegypt.edu"]
    start_urls = ["http://dir.aucegypt.edu/index.aspx"]
    deals_list_xpath = '//*[@id="ctl00_ContentPlaceHolder1_DataList1"]'
    item_fields = {'name': '//*[contains(@id, "NameLabel")]',
    'department': '//*[contains(@id, "DeptLabel")]',
    'title': '//*[contains(@id, "TitleLabel")]',
    'email': '//*[contains(@id, "mailA")]/img[@src]',
    'phone': '//*[contains(@id, "PhoneLabel")]',
    'building': '//*[contains(@id, "BLDGLabel")]',
    'room': '//*[contains(@id, "RMLabel")]',
    'campus': '//*[contains(@id, "CampusLabel")]'}

    def parse(self, response):
        print "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
        yield FormRequest.from_response(response, formname='aspnetForm',
                            formdata={'__LASTFOCUS':'', '__VIEWSTATE': '',
                            '__EVENTTARGET': '', 'EVENTARGUMENT': '', '__EVENTVALIDATION': '/wEWqAEC++7x0g4C4aONwg8Cj+eYrAIC9KeviQwChMam+A0CldHWPQKz/67tAQLKmqHvAwKX+K6hAgL0j/KYDQLfspn/CQLf/trmDwKBlLyqCgLLqd3TBQL91aTSAgKO6ZzZBQLZxISMAgLdr7amBAKkk+KZBwLS857DBQL5r6DZDgKfpamLAQKAwLnKBQKBhqrnDQKwr8IFAvL2mrkDApHU1/AIAvGs6/YIAp6B2s8EApPJi9oDAqferaIFAoinhfsOAqO8mOYCAue4j/sPAuql6uQCAsrXgq8IAorK/JQEAv+txZcJAvWDt8UBArKfgkMCj/LMvA0CwtOHzAUC+9P0rwcCtqC52wUC3IjrDwLDxZXzCgLyhabGDALN27GcBgLgi5QnAsqKq2gC5b2Zsw8CipPbyQoCpcPOsgwCx6v+twsC3buNugoCn9/b1gsC3/3/yQsChc6DuAwC3daf4wEC0u6YkgsCh6iVuwkCtr74hw4C9PKr1gUCmoW0wgECndLB7QMCltj4mgMC0JLvmwICqKb0zQYCvpSX8A4Coe3yxgECivqZjgkCnNuTmAoCtM61IQLlooh2AsaGqtIBAr7f/KEFAq7QhhsClI/JtAoClomcqAUCpf79/AYC4fTsvAwCn4iByAoCp+Xr6gIC7aSm3QoCgMnW9wQCuseenAsC/am/2Q0Ck5ig4gECqrHjvgwCttjykw0Cisjkiw8C8rX5vg8C/reIlAMC9OG+zAkC+7KAyAwCntig1QQCiIjI8gcC6MHTkQMChu6glwgCxLbckgkC89/i9AMC4u37wQkC07GiggoC+8WYpQcCzuzrkw0C4LXylgwCo63ivAQC+o6vEgKtpIS5AwKrg53YBQLe+v6hBwLK6vvKBgKA0PQdAuW0mMkEArvx7awNAseg2+4OArDcoacIAqzU3qsEArLQ0bcMAo+9n7MNAs7duvEOAsKC264NAryWheADArH2ibsIApy92t8NAu3fyq8EAsWPv50GAv/x67sJAujz48YBAtuX7qUKAun70MIFAszz7tsBAsqy6eQDApqm+rcDAqqm7VAC1/iBvAMC5qWR+A0Cr5aoowoC0qyUgQQCxfKXpA4Coafwkg8C+OPz8w0Cy8mpoQsC39/p5wcCgeLwmAgCkdOk/wUC9de6rwYC+ZSM7QcCovnP7Q8CrKzPgQoCo/vj0wEC2du+rAICutuc7goC8M2HhgQC683o9AwCiau8hQsCmsa03wMC74qX0Q8C54mpDwKjgs7XDwLHvLkXAornye8NAo6S5s0DApn6mewEAp7A/9cFAriAurMOAuegydoOAoDiyWM/VCFhLW03ut2VEb9REhyGIrPdkoyoqUEVPdsBZ3CQJA==',
                            'ctl00%24ContentPlaceHolder1%24firstname' : '', 'ctl00%24ContentPlaceHolder1%24firstnametype': 'firstcontains', 'ctl00%24ContentPlaceHolder1%24lastname': '',
                            'ctl00%24ContentPlaceHolder1%24lastnametype': 'lastcontains', 'ctl00%24ContentPlaceHolder1%24title': '', 'ctl00%24ContentPlaceHolder1%24email': '',
                            'ctl00%24ContentPlaceHolder1%24department': 'Applied+Linguistics', 'ctl00%24ContentPlaceHolder1%24Button1': 'Search'}, callback=self.parse2)

    def parse2(self, response):
        print response
        selector = Selector(response)
        print selector
        for deal in selector.xpath(self.deals_list_xpath):
            loader = XPathItemLoader(faculty_contact(), selector=deals_list_xpath)

            loader.default_input_processor = MapCompose(unicode.strip)
            loader.default_output_processor = Join()

            for field, xpath in self.item_fields.iteritems():
                loader.add_xpath(field, xpath)
            yield loader.load_item()
